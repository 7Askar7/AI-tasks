# -*- coding: utf-8 -*-
"""titanic_ml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/7Askar7/1bc3fc5015b89e3b8a892a13b0202c90/titanic_ml.ipynb

Titanic dataset
"""

import pandas as pd
data = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")
test_ids = test["PassengerId"]
print(data[data.isna().any(axis =1)]) #проверка на Nan
data.head(5)

def clean(data):
    data = data.drop(["PassengerId","Name","Cabin","Ticket"],axis = 1) #Удаляем не нужные столбцы
    colmns = ["Age", "Fare", "SibSp", "Parch"] 
    for col in colmns:
        # Вместе пропуска используется среднее заначение
        data[col].fillna(data[col].median(), inplace = True) 
    data.Embarked.fillna("U",inplace=True) # Заполняем пропуски и вмесесто пропуска U
    return data
    
data = clean(data)
test = clean(test)

data.sample(5)

from sklearn import preprocessing 
# Используем LableEncoder для преобразования в численные переменные
model = preprocessing.LabelEncoder()
cols = ["Sex", "Embarked"]

# Для столбцов из "col" изсползуем кодирование
for i in cols:
    data[i] = model.fit_transform(data[i])
    test[i] = model.transform(test[i])
    print(model.classes_)
data.head(5)

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

y = data["Survived"]
X = data.drop("Survived", axis = 1)

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2, random_state = 42)

# Обучаем на train data
clf = LogisticRegression(random_state = 0, max_iter=1000).fit(X_train, y_train)

# Предсказываем
prd = clf.predict(X_val)

print("Accuracy = ",accuracy_score(y_val, prd))

prd_test = clf.predict(test)

#Используем DataFrame для звполнения таблицы предсказанными данными
df = pd.DataFrame({"PassengerId":test_ids.values,
                   "Survived":prd_test})

#Создание csv файла
df.to_csv("submission.csv", index = False)